" VIMRC
" set shell to zsh
:set shell=/usr/bin/zsh

" minimal settings
set nocompatible
set backspace=indent,eol,start
set hidden
set noswapfile

let $RTP=split(&runtimepath, ',')[0]
let $RC="$HOME/.vim/vimrc"

command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" default indentation
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent


" UI "{{{
set showmode

set showcmd
set cmdheight=1

set laststatus=2

set wildmenu
set ruler

set showmatch

syntax enable
"}}}

" FILE BROWSING "{{{
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\b'
"}}}
    
" EDITING GOODIES "{{{
set cursorline
set listchars=tab:>-,nbsp:_,trail:_,eol:ยง,extends:>,precedes:<
set showbreak=\\

set ignorecase
set smartcase

set hlsearch
set incsearch
set number relativenumber

set colorcolumn=80,120
"}}}

" TAG JUMPING "{{{
" Create the `tags` file
command! MakeTags !ctags -R .
"}}}

" CODECOMPLETION "{{{
:filetype plugin indent on
    if has("autocmd") && exists("+omnifunc")
        autocmd Filetype *
            \   if &omnifunc == "" |
            \       setlocal omnifunc=syntaxcomplete#Complete |
            \   endif
    endif

:set completeopt=longest,menuone

:inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" open omni completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <C-@> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
            \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" open user completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <S-@> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
            \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
"}}}

" SNIPPETS "{{{
nnoremap \html :-1read $HOME/.vim/templates/skeleton.html<CR>3jwf>a
"}}}

" FOLDING "{{{
set foldmethod=marker

nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}

" COLORTHEME "{{{
set background=dark
let g:solarized_visibility="high"
colorscheme solarized

call togglebg#map("<F5>")
"}}}

" STATUSLINE "{{{
function! GitBranch()
  let branch = trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null"))
  if empty(branch)
      return ''
  else
      return branch . ' '
  endif
endfunction

autocmd BufWinEnter * let b:git_branch = GitBranch()

function! HighlightSearch()
  if &hlsearch
    return 'Hl' . ' '
  else
    return ''
  endif
endfunction

function! IncSearch()
  if &incsearch
    return 'Inc' . ' '
  else
    return ''
  endif
endfunction

highlight StatusHighlight ctermfg=12 ctermbg=8

set statusline=
set statusline+=%#StatusHighlight#                                              " other background
set statusline+=%{b:git_branch}                                                 " git branch
set statusline+=%*\                                                             " default background
set statusline+=%f\ %r%m                                                        " path, read only  and editing marker
set statusline+=%r\ %y\                                                         " read only marker and filetype
set statusline+=%{&fileencoding?&fileencoding:&encoding}\ \[%{&fileformat}\]    " encoding and format
set statusline+=%=                                                              " seperator
set statusline+=ascii:\ %04b\ hex:\ 0x%04B\                                     " ascii and hex under cursor
set statusline+=%#StatusHighlight#                                              " alternative other background
set statusline+=\ %{HighlightSearch()}%{IncSearch()}                            " HlSearch, IncSearch marker
set statusline+=%#StatusLineNC#                                                 " other background
set statusline+=\ %5l\:%-3c\ %3p%%                                              " position
"}}}

" MAP KEY TO TOGGLE OPTION "{{{
function! MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command -nargs=+ MapToggle call MapToggle(<f-args>)

MapToggle <F6> list
MapToggle <F7> hlsearch
MapToggle <F8> incsearch
MapToggle <F9> relativenumber
"}}}
