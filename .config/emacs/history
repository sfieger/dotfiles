;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(yes-or-no-p-history face-name-history set-variable-value-history read-expression-history empty-history tmm--history buffer-name-history minibuffer-history file-name-history custom-variable-history extended-command-history))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq face-name-history '("whitespace-tab"))
(setq read-expression-history '("whitespace-tab" "(whitespace-hspace)" "(frame-parameter nil 'background-mode)=='dark" "(if (frame-parameter nil 'background-mode)='dark)" "(frame-parameter nil 'background-mode)" "(frame-parameters)"))
(setq tmm--history '("b==>Browse Customization Groups" "F==>Faces Matching..." "o==>Options Matching..." "a==>All Settings Matching..." "g==>Specific Group..." "f==>Specific Face..." "S==>Specific Option..." "n==>New Options..." "s==>Saved Options" "b==>Browse Customization Groups" "t==>Top-level Customization Group" "c==>Custom Themes"))
(setq buffer-name-history '("init.el" "*Customize Apropos*" "custom-vars.el" "*Customize Browser*" "*Customize Group: Data*" "*Customize Apropos*" "*Customize Group: Whitespace*" "*Help*" "*Customize Option: Global Display Line Numbers Mode*" "*info*" "*Help*"))
(setq minibuffer-history '("customize" "whitespace-tab" "face-name" "brightred" "whitespace-tab" "whitespace-space" "set-frame-parameter" "set-terminal-parameter" "whitespace-display-mappings" "whitespace" "global-display-line-numbers-mode" "line-number-mode" "after-make-frame-functions" "load-theme" "inhibit-startup-message" "apropos"))
(setq file-name-history '("~/.config/emacs/custom-vars.el" "~/.config/emacs/init.el" "~/.config/emacs/custom-vars.el"))
(setq custom-variable-history '("whitespace-tab-regexp" "history-length"))
(setq extended-command-history '("customize" "apropos-command" "set-face-foreground" "describe-face" "set-variable" "whitespace-mode" "customize-group" "whitespace-mode" "customize-save-variable"))
